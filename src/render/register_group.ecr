<% registers.each do |register| %>
  <% register_int_type = larger_uint(register.properties.size) %>
  <% int_type = register_int_type.name %>
  <% impl_name = register.dim.try(&.impl_name(register.name)) || register.name %>
  <% if impl_name=~/^[0-9].*/ %>
    <% impl_name = "N"+impl_name %>
  <% end %>
  

  <% if description = register.description %>
    <% description.each_line do |doc| -%>
      # <%= doc %>
    <% end -%>
  <% end -%>
  <%= register.dim ? "abstract" : "" %> struct <%= impl_name %>
    <% unless register.dim %>
      ADDRESS = BASE_ADDRESS + <%= hex(register.address_offset) %>

      protected def self.address : UInt64
        ADDRESS
      end
    <% end %>

    @value : <%= int_type %>

    def initialize(@value : <%= int_type %>)
    end

    def to_int : <%= int_type %>
      @value
    end

    def self.reset_value : self
      new(<%= hex(register.properties.reset_value) %>)
    end

    def self.pointer : Pointer(<%= int_type %>)
      Pointer(<%= int_type %>).new(self.address)
    end

    def self.value : self
      value = self.pointer.load(volatile: true)
      new(value)
    end

    def self.value=(value : self) : self
      self.pointer.store(value.to_int, volatile: true)
      value
    end

  <% register.fields.each do |field| %>
    <% field_name = field.name.underscore %>
    <% if field_name=~/^[0-9].*/ %>
    <% field_name = "_"+field_name %>
    <% end %>
    <% field_name_upcase = field.name %>
    <% int_type = larger_uint(field.bit_width) %>
    <% type = type(field) %>
    <% if field_name_upcase=~/^[0-9a-z].*/  %>
    <% field_name_upcase = "N"+field_name_upcase %>
      <% if field.enumerated_values.size > 0 %>
      <% type = field_name_upcase %>
      <% end %>
    <% end %>
    
    <% mask = register_int_type.new(1).rotate_left(field.bit_width) &- 1 %>
    <% mask_shifted = mask << field.bit_offset %>

    <% if field.enumerated_values.size > 0 %>
    
      enum <%= field_name_upcase %> : <%= int_type.name %>
      <% field.enumerated_values.each do |val| %>
        <% name = val.name.lstrip("_").upcase %>
        <% name = "VAL_#{name}" if name[0].number? %>

        <% if description = val.description %>
          <% description.each_line do |doc| -%>
            # <%= doc %>
          <% end -%>
        <% end -%>
        <%= name %> = <%= hex(val.value) %>
      <% end %>

        def self.reset_value : <%= field_name_upcase %>
          <%= impl_name %>.reset_value.<%= field_name %>
        end
      end
    <% end %>

    <% if field.access.readable? %>
      <% if description = field.description %>
        <% description.each_line do |doc| -%>
          # <%= doc %>
        <% end -%>
      <% end -%>
      def <%= field_name %> : <%= type %>
        <% if type == "Bool" %>
          @value.bits_set?(<%= hex(mask_shifted) %>)
        <% else %>
          <%= type %>.new!((@value >> <%= field.bit_offset %>) & <%= hex(mask) %>)
        <% end %>
      end

      <% if description = field.description %>
        <% description.each_line do |doc| -%>
          # <%= doc %>
        <% end -%>
      <% end -%>
      def self.<%= field_name %> : <%= type %>
        value.<%= field_name %>
      end
    <% end %>

    <% if field.access.writable? %>
      <% if description = field.description %>
        <% description.each_line do |doc| -%>
          # <%= doc %>
        <% end -%>
      <% end -%>
      def self.<%= field_name %>=(value : <%= type %>) : <%= type %>
        self.set(<%= field_name %>: value)
        value
      end
    <% end %>
  <% end %>

  <% if register.fields.count(&.access.writable?) > 0 %>
    def copy_with(
      *,
      <% register.fields.each do |field| -%>
        <% next unless field.access.writable? -%>
        <% field_name = field.name.underscore -%>
        <% if field_name=~/^[0-9].*/ -%>
        <% field_name = "_"+field_name -%>
        <% end -%>
        <% atype = type(field) -%>
        <% if atype.to_s=~/^[0-9].*/ -%>
        <% atype = "N"+atype -%>
        <% end -%>
        
        
        
        <%= field_name %> : <%= atype %>? = nil,
      <% end %>
    ) : self
      value = @value
      <% register.fields.each do |field| -%>
        <% next unless field.access.writable? %>
        <% field_name = field.name.underscore %>
        <% if field_name=~/^[0-9].*/ -%>
        <% field_name = "_"+field_name -%>
        <% end -%>
        <% mask = register_int_type.new(1).rotate_left(field.bit_width) &- 1 -%>
        <% mask_shifted = mask << field.bit_offset -%>
        unless <%= field_name %>.nil?
          value = (value & <%= hex(~mask_shifted) %>) |
                  <%= register_int_type %>.new!(<%= field_name %>.to_int).&(<%= hex(mask) %>) << <%= field.bit_offset %>
        end
      <% end %>
      self.class.new(value)
    end

    def self.set(
      *,
      <% register.fields.each do |field| -%>
        <% next unless field.access.writable? -%>
        <% field_name = field.name.underscore -%>
        <% if field_name=~/^[0-9].*/ -%>
        <% field_name = "_"+field_name -%>
        <% end -%>
        <% atype = type(field) -%>
        <% if atype.to_s=~/^[0-9].*/ -%>
        <% atype = "N"+atype -%>
        <% end -%>
        <%= field_name %> : <%= atype %>? = nil,
      <% end %>
    ) : Nil
      self.value = self.value.copy_with(
        <% register.fields.each do |field| -%>
          <% next unless field.access.writable? -%>
          <% field_name = field.name.underscore -%>
          <% if field_name=~/^[0-9].*/ -%>
          <% field_name = "_"+field_name -%>
          <% end -%>
          <%= field_name %>: <%= field_name %>,
        <% end %>
      )
    end
  <% end %>
  end # struct

  <% if dim = register.dim %>
    <% dim.size.times do |dim_index| %>
    # dim.instance_name(register.name, dim_index)
      struct <%= impl_name %><%= dim_index %> < <%= impl_name %>
        ADDRESS = BASE_ADDRESS + <%= hex(dim.instance_addr(register.address_offset, dim_index)) %>

        protected def self.address : UInt64
          ADDRESS
        end
      end
    <% end %>
  <% end %>
<% end %>
